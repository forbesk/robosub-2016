//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

VisionService_getOpenCVVersion_args = function(args) {
};
VisionService_getOpenCVVersion_args.prototype = {};
VisionService_getOpenCVVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getOpenCVVersion_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getOpenCVVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getOpenCVVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
VisionService_getOpenCVVersion_result.prototype = {};
VisionService_getOpenCVVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getOpenCVVersion_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getOpenCVVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getConnectedCameras_args = function(args) {
};
VisionService_getConnectedCameras_args.prototype = {};
VisionService_getConnectedCameras_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getConnectedCameras_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getConnectedCameras_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getConnectedCameras_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Camera]);
    }
  }
};
VisionService_getConnectedCameras_result.prototype = {};
VisionService_getConnectedCameras_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size20 = 0;
        var _rtmp324;
        this.success = [];
        var _etype23 = 0;
        _rtmp324 = input.readListBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = new Camera();
          elem26.read(input);
          this.success.push(elem26);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getConnectedCameras_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getConnectedCameras_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter27 in this.success)
    {
      if (this.success.hasOwnProperty(iter27))
      {
        iter27 = this.success[iter27];
        iter27.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getFilterList_args = function(args) {
};
VisionService_getFilterList_args.prototype = {};
VisionService_getFilterList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getFilterList_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getFilterList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getFilterList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
VisionService_getFilterList_result.prototype = {};
VisionService_getFilterList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.success = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString().value;
          this.success.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getFilterList_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getFilterList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter35 in this.success)
    {
      if (this.success.hasOwnProperty(iter35))
      {
        iter35 = this.success[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getImage_args = function(args) {
  this.source = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new InputSource(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
  }
};
VisionService_getImage_args.prototype = {};
VisionService_getImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new InputSource();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getImage_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getImage_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getImage_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_getImage_result.prototype = {};
VisionService_getImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getImage_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getScaledImage_args = function(args) {
  this.source = null;
  this.resolution = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new InputSource(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = new Resolution(args.resolution);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resolution is unset!');
    }
  }
};
VisionService_getScaledImage_args.prototype = {};
VisionService_getScaledImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new InputSource();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resolution = new Resolution();
        this.resolution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getScaledImage_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getScaledImage_args');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.STRUCT, 2);
    this.resolution.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_getScaledImage_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_getScaledImage_result.prototype = {};
VisionService_getScaledImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_getScaledImage_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_getScaledImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilter_args = function(args) {
  this.filter = null;
  if (args) {
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new Filter(args.filter);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filter is unset!');
    }
  }
};
VisionService_applyFilter_args.prototype = {};
VisionService_applyFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new Filter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilter_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilter_args');
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 1);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilter_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_applyFilter_result.prototype = {};
VisionService_applyFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilter_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilterChain_args = function(args) {
  this.filters = null;
  if (args) {
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = Thrift.copyList(args.filters, [Filter]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field filters is unset!');
    }
  }
};
VisionService_applyFilterChain_args.prototype = {};
VisionService_applyFilterChain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.filters = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new Filter();
          elem42.read(input);
          this.filters.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilterChain_args.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilterChain_args');
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.filters.length);
    for (var iter43 in this.filters)
    {
      if (this.filters.hasOwnProperty(iter43))
      {
        iter43 = this.filters[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionService_applyFilterChain_result = function(args) {
  this.success = null;
  this.snf = null;
  if (args instanceof SourceNotFound) {
    this.snf = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Output(args.success);
    }
    if (args.snf !== undefined && args.snf !== null) {
      this.snf = args.snf;
    }
  }
};
VisionService_applyFilterChain_result.prototype = {};
VisionService_applyFilterChain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Output();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.snf = new SourceNotFound();
        this.snf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VisionService_applyFilterChain_result.prototype.write = function(output) {
  output.writeStructBegin('VisionService_applyFilterChain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.snf !== null && this.snf !== undefined) {
    output.writeFieldBegin('snf', Thrift.Type.STRUCT, 1);
    this.snf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VisionServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
VisionServiceClient.prototype = {};
VisionServiceClient.prototype.getOpenCVVersion = function(callback) {
  this.send_getOpenCVVersion(callback); 
  if (!callback) {
    return this.recv_getOpenCVVersion();
  }
};

VisionServiceClient.prototype.send_getOpenCVVersion = function(callback) {
  this.output.writeMessageBegin('getOpenCVVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_getOpenCVVersion_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getOpenCVVersion();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_getOpenCVVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_getOpenCVVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getOpenCVVersion failed: unknown result';
};
VisionServiceClient.prototype.getConnectedCameras = function(callback) {
  this.send_getConnectedCameras(callback); 
  if (!callback) {
    return this.recv_getConnectedCameras();
  }
};

VisionServiceClient.prototype.send_getConnectedCameras = function(callback) {
  this.output.writeMessageBegin('getConnectedCameras', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_getConnectedCameras_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getConnectedCameras();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_getConnectedCameras = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_getConnectedCameras_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getConnectedCameras failed: unknown result';
};
VisionServiceClient.prototype.getFilterList = function(callback) {
  this.send_getFilterList(callback); 
  if (!callback) {
    return this.recv_getFilterList();
  }
};

VisionServiceClient.prototype.send_getFilterList = function(callback) {
  this.output.writeMessageBegin('getFilterList', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_getFilterList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getFilterList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_getFilterList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_getFilterList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFilterList failed: unknown result';
};
VisionServiceClient.prototype.getImage = function(source, callback) {
  this.send_getImage(source, callback); 
  if (!callback) {
    return this.recv_getImage();
  }
};

VisionServiceClient.prototype.send_getImage = function(source, callback) {
  this.output.writeMessageBegin('getImage', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_getImage_args();
  args.source = source;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getImage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_getImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_getImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.snf) {
    throw result.snf;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getImage failed: unknown result';
};
VisionServiceClient.prototype.getScaledImage = function(source, resolution, callback) {
  this.send_getScaledImage(source, resolution, callback); 
  if (!callback) {
    return this.recv_getScaledImage();
  }
};

VisionServiceClient.prototype.send_getScaledImage = function(source, resolution, callback) {
  this.output.writeMessageBegin('getScaledImage', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_getScaledImage_args();
  args.source = source;
  args.resolution = resolution;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getScaledImage();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_getScaledImage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_getScaledImage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.snf) {
    throw result.snf;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getScaledImage failed: unknown result';
};
VisionServiceClient.prototype.applyFilter = function(filter, callback) {
  this.send_applyFilter(filter, callback); 
  if (!callback) {
    return this.recv_applyFilter();
  }
};

VisionServiceClient.prototype.send_applyFilter = function(filter, callback) {
  this.output.writeMessageBegin('applyFilter', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_applyFilter_args();
  args.filter = filter;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_applyFilter();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_applyFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_applyFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.snf) {
    throw result.snf;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyFilter failed: unknown result';
};
VisionServiceClient.prototype.applyFilterChain = function(filters, callback) {
  this.send_applyFilterChain(filters, callback); 
  if (!callback) {
    return this.recv_applyFilterChain();
  }
};

VisionServiceClient.prototype.send_applyFilterChain = function(filters, callback) {
  this.output.writeMessageBegin('applyFilterChain', Thrift.MessageType.CALL, this.seqid);
  var args = new VisionService_applyFilterChain_args();
  args.filters = filters;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_applyFilterChain();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

VisionServiceClient.prototype.recv_applyFilterChain = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new VisionService_applyFilterChain_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.snf) {
    throw result.snf;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'applyFilterChain failed: unknown result';
};
